#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
layout(location = 2) in vec3 vertexColor;
layout(location = 3) in vec2 vertexUV; 


// Values that stay constant for the whole mesh.
uniform mat4 ViewProjectionTransform;
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectonTransform;

// Light and Material Uniform Variables
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light

// Outputs to fragment shader
out vec3 normal;  // You will need this when you do per-fragment lighting
out vec4 v_color;
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
out vec2 UV;

void main()
{
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  ViewProjectionTransform * WorldTransform * vec4(vertexPosition_modelspace,1);

	mat4 MV = ViewTransform * WorldTransform;
	normal = vertexNormal_modelspace; // Does this need to be transformed when we pass it to the fragment shader?
	v_color = vec4(vertexColor, 1.0f);

	normal = vec3(transpose(inverse(MV))*vec4(vertexNormal_modelspace,0));
	

	vec4 vertexViewPos = MV*vec4(vertexPosition_modelspace,1);
	eyeVector = -vec3(vertexViewPos);


	vec4 lightPos = ViewTransform*WorldLightPosition;
	lightVector = vec4(vec3(lightPos - vertexViewPos), WorldLightPosition.w);
	UV = vertexUV;
}

