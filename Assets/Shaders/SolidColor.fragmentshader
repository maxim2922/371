#version 330 core

// Light and Material Uniform Variables
uniform vec4 materialCoefficients; // x: ambient   y: diffuse   z: specular   w: specular exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: kC  y: kL  z: kQ

// Ouput to fragment shader
out vec4 color;

in vec4 v_color;
in vec2 UV;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space

uniform sampler2D myTextureSampler;

void main()
{
vec3 ambient = lightColor*materialCoefficients.x;
	
	vec3 lightDir = normalize(vec3(lightVector));
	float diff = max(dot(normalize(normal), lightDir), 0);
	float distance = length(vec3(lightVector));
	
	float fAtt = 1/(lightAttenuation.x + lightAttenuation.y*distance + lightAttenuation.z*distance*distance);
	vec3 diffuse = lightColor*diff*materialCoefficients.y;
	
	
	
	vec3 reflectDir = (2*dot(normalize(normal),lightDir)*normalize(normal) - lightDir);
	float spec = max(pow(max(dot(normalize(eyeVector),normalize(reflectDir)),0),materialCoefficients.w), 0);
	
	vec3 specular = lightColor*spec*materialCoefficients.z;
	if(lightVector.w !=0){
		diffuse = lightColor*diff*materialCoefficients.y*fAtt;
		specular = lightColor*spec*materialCoefficients.z*fAtt;
	}

	vec4 textureColor = texture( myTextureSampler, UV );


	// set the fragment color to the interpolated vertex color
	color = vec4(vec3(textureColor)*(ambient+diffuse+specular),1);
	if(color.a <= 0.02f)
        discard;
}